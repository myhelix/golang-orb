description: >
  Install ginkgo if necessary and run tests

parameters:
  environment:
    description: what runner to run on
    type: string
  golang_version:
    type: enum
    enum: ['1.13.15', '1.14.15', '1.15.10', '1.16.2', '1.16.10', '1.17', '1.18', '1.19', '1.20', '1.21', '1.22', '1.23', '1.24']
    description: >
      NOTE these are installed by https://github.com/myhelix/circleci-runner/blob/master/lib/circleci-runner-stack.ts#L152..L156
  org:
    type: string
    default: myhelix
  project_name:
    type: string
    description: "Project name, must match github repo name"
  test_type:
    description: The test type to run.
    type: enum
    enum: ['acceptance', 'unit', 'e2e']
  ginkgo_params:
    type: string
    default: -r --procs=4 --compilers=4 --randomize-all --randomize-suites --fail-fast --keep-going --race --trace --junit-report=report.xml --json-report=report.json --output-dir=test-results/ --timeout=5m --poll-progress-after=120s --poll-progress-interval=30s
    description: "flags to add to the ginkgo command (see ginkgo -h)"
  go_env:
    type: string
    description: "Set the environment Variable GO_ENV"
    default: ""
  goexperiment:
    type: string
    default: ""
    description: "parameter to add GOEXPERIMENT to ginkgo command"

steps:
  - run:
      name: determine GO_ENV
      command: |
        if [[ -z "<< parameters.go_env >>" ]]; then
          echo "export GO_ENV=<< parameters.environment >>" >> $BASH_ENV
        else
          echo "export GO_ENV=<< parameters.go_env >>" >> $BASH_ENV
        fi
  - run:
      name: setup golang
      command: goenv version
  - run:
      name: install ginkgo
      command: |
        echo "installing ginkgo v2"
        GO111MODULE=on go install github.com/onsi/ginkgo/v2/ginkgo
  - run:
      name: run ginkgo
      environment:
        ENVIRONMENT: << parameters.environment >>
        GOENV_VERSION: << parameters.golang_version >>
        PROJECT_NAME: << parameters.project_name >>
        TEST_TYPE: <<parameters.test_type>>
      command: |
        if [ -d test-results ]; then
          rm -rf test-results
        fi
        mkdir test-results

        EXTRA_PARMS=""
        if [[ 'unit' == "$TEST_TYPE" ]]; then
          echo "Running all tests except acceptance tests"
          EXTRA_PARAMS="--cover --coverprofile cover.out --skip-package=acceptance,e2e"
        elif [[ 'e2e' == "$TEST_TYPE" ]]; then
          echo "Running E2E tests"
          EXTRA_PARAMS="e2e"
        else
          echo "Running acceptance tests"
          EXTRA_PARAMS="acceptance"
        fi
        ginkgo version
        GOEXPERIMENT=<< parameters.goexperiment >> ginkgo << parameters.ginkgo_params >> $EXTRA_PARAMS
