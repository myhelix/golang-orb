description: >
  Glide and then run tests using ginkgo

parameters:
  environment:
    description: what runner to run on
    type: string
  label_filter_override:
    description: >
      A filter expression value for the -label-filter argument. Use this or test_type, not both.
    type: string
    default: ""
  ginkgo_params:
    description: "command line flags to add to when the ginkgo command is run (see ginkgo -h)"
    type: string
    default: -r --procs=4 --compilers=4 --randomize-all --randomize-suites --fail-fast --keep-going --race --trace --junit-report=report.xml --json-report=report.json --output-dir=test-results/ --timeout=5m --poll-progress-after=120s --poll-progress-interval=30s --cover --coverprofile=cover.out
  go_env:
    description: "Set the environment Variable GO_ENV"
    type: string
    default: ""
  golang_version:
    description: >
      NOTE these are installed by https://github.com/myhelix/circleci-runner/blob/master/lib/circleci-runner-stack.ts#L152..L156
    type: enum
    enum: ['1.18', '1.19', '1.20', '1.21', '1.22', '1.23', '1.24']
  org:
    type: string
    default: "myhelix"
  project_name:
    description: "Project name, must match github repo name"
    type: string
  test_type:
    description: The test type to run. Use this or label_filter_override, not both.
    type: enum
    enum: ["unit", "integration", "functional", "acceptance", "e2e", "performance"]
  goexperiment:
    type: string
    default: ""
    description: "parameter to add GOEXPERIMENT to ginkgo command"

environment:
  GOENV_VERSION: << parameters.golang_version >>
  GO_ENV: << parameters.go_env >>
  PROJECT: << parameters.project_name >>

# Use the runner
machine: true
resource_class: << parameters.org >>/<< parameters.environment >>
working_directory: /home/circleci/go/<< parameters.golang_version >>/src/github.com/<< parameters.org >>/<< parameters.project_name >>

steps:
  - sanitize-identity
  - checkout
  - assume_oidc_role
  - run:
      name: Set Default GO_ENV and Shims
      command: |
        echo 'export GO_ENV=${GO_ENV:-$ENVIRONMENT}' >> $BASH_ENV
        echo 'export GOENV_ROOT="$HOME/.goenv"' >> $BASH_ENV
        echo 'export PATH="$GOENV_ROOT/bin:$PATH"' >> $BASH_ENV
        echo 'export PATH="$GOENV_ROOT/shims:$PATH"' >> $BASH_ENV
  - run:
      name: Set AWS_REGION
      command: echo 'export AWS_REGION=${AWS_REGION:-us-east-1}' >> $BASH_ENV
  - run:
      name: print golang version
      command: |
        echo $GOENV_VERSION
        go version
  - go/mod-download
  - run:
      name: go mod vendor
      command: go mod vendor
  - ginkgo-v2-labels:
      environment: << parameters.environment >>
      label_filter_override: << parameters.label_filter_override >>
      ginkgo_params: << parameters.ginkgo_params >>
      go_env: <<parameters.go_env>>
      golang_version: << parameters.golang_version >>
      org: << parameters.org >>
      project_name: << parameters.project_name >>
      test_type: <<parameters.test_type>>
      goexperiment: <<parameters.goexperiment>>
  - store_test_results:
      path: test-results
  - run:
      name: Filter and store coverage
      command: |
        if [ -s test-results/cover.out ]; then
          mkdir -p /tmp/artifacts

          sed -E -e "/.+\/(main)\.go:.+/d" \
          -e "/.+mock([A-Za-z0-9_]*)?\.go:.+/d" \
          -e "/^\s*$/d" test-results/cover.out > filtered-cover.out

          go tool cover -html=filtered-cover.out -o coverage.html
          mv coverage.html /tmp/artifacts
        fi
  - store_artifacts:
      path: /tmp/artifacts
